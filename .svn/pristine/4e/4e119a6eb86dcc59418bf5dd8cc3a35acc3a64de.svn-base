#include <ostream>
#include <iostream>
#include <limits>
#include <stdexcept>
#include "Cow.h"
//#include "System.h"
#include "System.h"
#include "BVD_Random_Number_Generator.h"
#include "Herd.h"
#include "Farm.h"
#include "Events.h"
#include "Utilities.h"

bool Cow_Pointer_Sort_Criterion::operator() (Cow const * const c1 , Cow const * const c2)
  {
    return (c1->id() < c2->id() );
  }


//static methods and members:
int  Cow::cow_id_counter = 0;
System* Cow::system = NULL;
std::unordered_map< int , Cow* > Cow::all_living_cows = std::unordered_map< int , Cow* >(); 
int  Cow::total_number()          { return cow_id_counter; }
int  Cow::number_of_living_cows() { return all_living_cows.size(); }
void Cow::set_system( System* s ) { system = s; }
Cow* Cow::get_address( int search_id )
{
  try { return all_living_cows.at( search_id ); }
  catch ( const std::out_of_range& oor ) { return NULL; }
}


//non-static methods from here.
int   Cow::id() const { return _id; }

Cow::Cow( double time , Cow* my_mother )
{
  
	init(time, my_mother,  system->rng.is_calf_female());
}
Cow::Cow( double time, Cow* my_mother, bool isFemale){
	init(time, my_mother,  isFemale);
}
void Cow::init( double time, Cow* my_mother, bool isFemale){
	_id                  =  cow_id_counter++;
	birth_time           =  time;
	female               =  isFemale;
	infection_status     =  Infection_Status::SUSCEPTIBLE;
	last_conception_time = -1;
	calving_number       =  system->rng.number_of_calvings();
	has_been_pregnant_at_all_so_far = false;
	calf_status          =  Calf_Status::NO_CALF;
	mother               =  my_mother;
	if (my_mother != NULL )
		herd                 =  my_mother->herd;
	all_living_cows[ _id ]= this;
	birthTimesOfCalves = new double[calving_number+1]; //using one more entry to have a END for the output class to look for
	for(int i=0; i < calving_number+1; i++){
		birthTimesOfCalves[i] = -1.0;
	}
}
Cow::~Cow()
{

  all_living_cows.erase( id() );
}


void Cow::execute_event( Event* e )
{ 
	Farm * f = herd->farm;  // We have to store this at this place, because after executing an eventual DEATH event, the cow is already deleted..
	future_irc_events_that_move.erase(e); // Same reason for doing this here.
	
	switch ( e->type )
	{
		case Event_Type::BIRTH        :
			  execute_BIRTH( e->execution_time );
			  break;
		case Event_Type::ABORTION     :
			  execute_ABORTION( e->execution_time );
			  break;
		case Event_Type::INSEMINATION :
			if(e->execution_time - this->birth_time < 200.)
  	std::cout << "insem\t" <<  this->birth_time << "\t" << e->execution_time << "\t" << this->id() << "\t" << e->id<<  std::endl;
			  execute_INSEMINATION( e->execution_time );
			  break;
		case Event_Type::CONCEPTION   :
		if(e->execution_time - this->birth_time < 200.)
  	std::cout << "concep\t" << this->birth_time << "\t" << e->execution_time << "\t" << this->id() << "\t" << e->id<<  std::endl;
			  execute_CONCEPTION( e->execution_time );
			  break;
		case Event_Type::SLAUGHTER	  :
		case Event_Type::DEATH        :
			  execute_DEATH( e->execution_time );
			  break;
		case Event_Type::END_OF_MA    :
			  execute_END_OF_MA( e->execution_time );
			  break;
		case Event_Type::INFECTION    :
			  execute_INFECTION( e->execution_time );
			  break;
		case Event_Type::RECOVERY     :
			  execute_RECOVERY( e->execution_time );
			  break;
		default:
			  std::cerr << "Unknown event type for Cow: " << Utilities::Event_tostr.at (e->type) << ". Exiting." <<std::endl ;
			  exit(1);
	}
	if ( e->is_infection_rate_changing_event() ){
		//std::cout << "infection rate change event of type " << (int) (e->type) << std::endl;
		f->infection_rate_has_changed( e );
		
	}
}
Cow_Trade_Criteria Cow::getCowTradeCriteria(){
	double date = this->herd->farm->system->getCurrentTime();
	double age = date - this->birth_time;
	if(calf_status !=  Calf_Status::NO_CALF && calf_status != Calf_Status::ABORT){
		return PREGNANT;
	}
	if(this->children.size() > 0){
		//TODO return OLD_COW
		return DAIRY_COW;
	}else{
		if(age <= 84){
			return CALF;
		}else if(age <= 17.*31.){//TODO implement radnom distribution when breeding begins
			return HEIFER_PRE_BREEDING;
		}else 
			return HEIFER_RDY_BREEDING;
	}
}
void Cow::handle_rest_time_after_ABORTION_or_BIRTH( double time )
{
  double execution_time = time + system->rng.time_of_rest_after_calving(calving_number);
  if ( calving_number <= 0 )
    {/// Die Kuh hat ausgedient und wird auf Suppenkuh umgeschult.
      system->schedule_event( new Event(  execution_time , Event_Type::DEATH , id() ) ); // This should be changed to a new type of event, notifying the farm/herd of the cow's age..
    }
  else
    {/// Die Kuh hat noch nicht ausgedient und kann ihre Position als Gebär- und Milchmaschine behalten.
      // Der nächste Gebärauftrag wird aufgegeben.
      system->schedule_event( new Event( execution_time , Event_Type::INSEMINATION , id() ) );
    }
}

void Cow::execute_BIRTH( double time )
{
  if ( calf_status == Calf_Status::NO_CALF || time-last_conception_time < bvd_const::minimum_pregnancy_duration ) /// This should only happen if there has been an abortion.
    return;
  calving_number--;
  bool first_birth = !has_been_pregnant_at_all_so_far;
  has_been_pregnant_at_all_so_far = true;
  
  handle_rest_time_after_ABORTION_or_BIRTH( time );
  
  /// Will the newborn calf be living? (This depends on the age of the mother).
  if ( !system->rng.is_this_a_deadbirth( first_birth ) )
    { // Determine status of new calf
      Infection_Status is;
      switch ( calf_status )
	{
	case Calf_Status::SUSCEPTIBLE:
	  is = Infection_Status::SUSCEPTIBLE;
	  break;
	case Calf_Status::IMMUNE:
	  is = Infection_Status::IMMUNE;
	  break;
	case Calf_Status::PERSISTENTLY_INFECTED:
	  is = Infection_Status::PERSISTENTLY_INFECTED;
	  break;
	case Calf_Status::CRIPPLE:
	  calf_status = Calf_Status::NO_CALF;
	  return; /// Culled right away in this model.
	default: /// We will never land here, because NO_CALF has been excluded already.
	  calf_status = Calf_Status::NO_CALF;
	  return;
	}//switch

      calf_status = Calf_Status::NO_CALF;

      /// Welcome to this world little calf.
      Cow* calf = new Cow( time , this ); // The sex of the calf is determined in the constructor

      double time_of_death = std::numeric_limits<double>::max();
      // If this stays infinite, the cow will die anyway at some point,
      //  because either it is male or if it is female it has a finite number of calvings
      if ( is == Infection_Status::PERSISTENTLY_INFECTED )
	{ //PI animals will die earlier than others.
	  time_of_death = time + system->rng.lifetime_PI();
	  system->schedule_event( new Event( time_of_death , Event_Type::DEATH , calf->id() ) );
	}
      else
	{
	  time_of_death =  time + system->rng.time_of_death_as_calf(); // If this returns -1, newborn will not die as calf.
	  if ( time_of_death > time ) 
	    system->schedule_event( new Event( time_of_death , Event_Type::DEATH , calf->id() ) );
	  else  //Will not die as calf.
	    time_of_death = std::numeric_limits<double>::max();
	}
	
      double execution_time;
      if ( calf->female )
	{/// Female cow: schedule first insemination if it doesn't die before.
	  execution_time = time + system->rng.first_insemination_age();
	  if(execution_time - time < 200)
	  	std::cout << "fu " << execution_time << "\t" << time << std::endl;
	  if ( time_of_death > execution_time ) { system->schedule_event( new Event( execution_time , Event_Type::INSEMINATION, calf->id() ) ); }
	}
      else
	{/// Male cow: schedule culling if it doesn't die before.
	  // [DEATH Event should be replaced by a new Event "DEPORTATION" or something similar..]
// 	  execution_time = time + herd->farm->rng.life_expectancy_male_cow();
	  execution_time = time + system->rng.life_expectancy_male_cow();
	  if ( time_of_death > execution_time ) { system->schedule_event( new Event( execution_time , Event_Type::DEATH       , calf->id() ) ); }
	}
      
      if ( infection_status == Infection_Status::IMMUNE && is == Infection_Status::SUSCEPTIBLE ) // If the mother is IMMUNE, then calf is protected by Maternal antibodies for a while
	{
	  is = Infection_Status::IMMUNE;
	  double ma_end = time+system->rng.duration_of_MA();
	  if ( time_of_death > ma_end )
	    system->schedule_event( new Event( ma_end , Event_Type::END_OF_MA , calf->id() ) );
	}
      calf->infection_status = is;
      children.insert( calf );
      herd->farm->push_cow( calf );
      herd->reevaluateGroup(this);
      //log time of birth to mother cow in order to use it in output
      int index = 0;
      while(birthTimesOfCalves[index] != -1.0) index++;
      birthTimesOfCalves[index] = time;
//      if(time - this->birth_time < 200)
//      	std::cout << time << "\t" << this->birth_time << std::endl;
    }// END if not deadbirth.
}


void Cow::execute_ABORTION( double time )
{
  if (calf_status == Calf_Status::NO_CALF ) // Can this actually happen?
    return;
  calf_status = Calf_Status::NO_CALF;
  
  if ( time - last_conception_time > bvd_const::threshold_abortion_counts_as_calving )
    {
      calving_number--;
      has_been_pregnant_at_all_so_far = true;
    }
  handle_rest_time_after_ABORTION_or_BIRTH( time );
}

void Cow::execute_INSEMINATION( double time )
{
  bool conception;
  double execution_time = time + system->rng.insemination_result( !has_been_pregnant_at_all_so_far , &conception );
  
  if (conception) // The cow will become pregnant.
    system->schedule_event( new Event( execution_time , Event_Type::CONCEPTION , id() ) );
  else // The cow won't become pregnant -> Cull it. 
  		//TODO Send it to slaughterhouse?! 
  		//TODO Test again for insamination for another time/multiple times?
    system->schedule_event( new Event( execution_time , Event_Type::DEATH      , id() ) );
}

void Cow::execute_CONCEPTION( double time )
{
  last_conception_time            = time;
  double execution_time ;
  
  switch( infection_status )
    {	
    case Infection_Status::TRANSIENTLY_INFECTED:
      calf_status = system->rng.calf_outcome_from_infection ( 0 );
      break;
    case Infection_Status::PERSISTENTLY_INFECTED:
      calf_status = Calf_Status::PERSISTENTLY_INFECTED;          // p=1 for the birth of a PI calf by a PI mother.
      break;
    default:
      calf_status = Calf_Status::SUSCEPTIBLE; // Yes, SUSCEPTIBLE is right. An eventual immunity through MA is handled in the BIRTH routine.
      break;
    }
  if ( calf_status == Calf_Status::ABORT )
    {
      execution_time = time + system->rng.time_of_abortion_due_to_infection( 0 );
      system->schedule_event( new Event( execution_time , Event_Type::ABORTION , id() ) );
      return;
    }

  //At this point, the infection status of the mother can be anything.
  bool birth;
  execution_time = time + system->rng.conception_result( time - birth_time , infection_status , &birth );
  
  if ( birth )
    system->schedule_event( new Event( execution_time , Event_Type::BIRTH    , id() ) );
  else
    system->schedule_event( new Event( execution_time , Event_Type::ABORTION , id() ) );
}

void Cow::execute_DEATH( double time )
{
  for ( auto const& c : children )
    c->mother = NULL;
  if (mother != NULL)
    mother->children.erase(this);
  herd->pull_cow( this );  
  delete birthTimesOfCalves;
  delete this;
}

void Cow::execute_END_OF_MA( double time )
{
  infection_status = Infection_Status::SUSCEPTIBLE;
  herd->add_cow_to_susceptible( this );
  herd->number_of_R--;
  herd->number_of_S++;
}

void Cow::execute_INFECTION( double time )
{
  if ( infection_status !=Infection_Status::SUSCEPTIBLE )
    {
      std::cerr << "Non S cow getting infected.. @t=" <<time<< std::endl;
      std::cerr << "IS = " << Utilities::IS_tostr.at( infection_status ) << std::endl;
      //exit(1);
    }
  double execution_time;
  if ( time-birth_time < bvd_const::age_threshold_calf ) //It's a calf!
    {
      if (system->rng.will_TI_calf_die() )
	{
	  execution_time = time + system->rng.time_of_death_infected_calf() ;
	  system->schedule_event( new Event( execution_time , Event_Type::DEATH , id() ) );
	}
      else //Calf will not die
	{
	  execution_time = time + system->rng.duration_of_infection();
	  system->schedule_event( new Event( execution_time , Event_Type::RECOVERY , id() ) );
	}
    }
  else //It's not a calf.
    {// At this point, the calf status can only be NO_CALF or SUSCEPTIBLE (because the infection status before this event must have been SUSCEPTIBLE).
      if ( calf_status == Calf_Status::SUSCEPTIBLE ) // The cow is pregnant
	{
	  double time_of_pregnancy = time-last_conception_time;
	  calf_status = system->rng.calf_outcome_from_infection ( time_of_pregnancy );
	  if (calf_status == Calf_Status::ABORT )
	    {
	      execution_time = time + system->rng.time_of_abortion_due_to_infection( time_of_pregnancy );
	      system->schedule_event( new Event( execution_time , Event_Type::ABORTION , id() ) );
	    }
	}
      else // The cow is not pregnant
	{
	}
      //At this point it's still not a calf.
      //And it could be pregnant or not
      execution_time = time + system->rng.duration_of_infection();
      system->schedule_event( new Event( execution_time , Event_Type::RECOVERY , id() ) );
      /// NOTE: The reason to do schedule the RECOVERY separately for calves and non calves is not within the BVD model,
      ///        There is just no other way to get the right program flow.
    }
  // At this point, it can be a calf or not and pregnant or not.
  infection_status = Infection_Status::TRANSIENTLY_INFECTED;
  herd->remove_cow_from_susceptible( this );
  herd->number_of_S--;
  herd->number_of_TI++;
}

void Cow::execute_RECOVERY( double time )
{
  infection_status = Infection_Status::IMMUNE;
  herd->number_of_TI--;
  herd->number_of_R++;
}

void Cow::register_future_infection_rate_changing_event( Event* e )
{
  // (1) Check if the events is irc and is one the moves with the cow
  // (2) if yes, register it.
  if (!(e->is_infection_rate_changing_event()))
    {
      std::cerr << "Tried to register a non irc event with a cow. Aborting" <<std::endl;
      exit(1);
    }
  if ( e->type == Event_Type::INFECTION ) //Infection Events don't move with the cow.
    return;
  if ( e->id != id() )
    {
      std::cerr << "Tried to register an irc event pertaining to a different cow.. Aborting" <<std::endl;
      exit(1);
    }
  future_irc_events_that_move.insert( e );
}


//TODO: Implement the bookkeeping for infection rate changes within a farm
//      There is a function for registering future infection rate changing events.
//      This function will be called by the scheduling routine of system.


//(*) Even if the infection rate actually did not change, for any event where it *could* have changed, the farm has to be notified.
//    The reason is that only infections up to this point have been scheduled by the farm, because the infection rate could have changed.

