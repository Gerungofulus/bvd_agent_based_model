#include "Market.h"
#include "System.h"
#include "Herd.h"
#include "Farm.h"
#include "TradeFilter.h"
Offer::Offer(Cow::Set* cows, Farm* src):cows(cows),src(src){
	
}
Offer::~Offer(){
	delete this->cows;
}
Cow::Set*  Offer::getCows(){
	return this->cows;
	//setOFCows = *(this->cows);
}

Demand::Demand(Cow_Trade_Criteria criteria, int number, Farm* source):crit(criteria),numberOfDemandedCows(number),src(source){
	if(number <=0)
		this->numberOfDemandedCows = 0;
}
Demand::~Demand(){}


Market::Market(System* system):s(system){
	calves = new std::queue<Cow*>();
  	heifersPreBreeding = new std::queue<Cow*>();
  	heifersRdyBreeding = new std::queue<Cow*>();
  	infertile = new std::queue<Cow*>() ;
  	pregnant = new std::queue<Cow*>() ;
  	dairyCow = new std::queue<Cow*>();
  	oldCow = new std::queue<Cow*>();
	calvesReq = new std::queue<Demand*>();
  	heifersPreBreedingReq = new std::queue<Demand*>();
  	heifersRdyBreedingReq = new std::queue<Demand*>();
  	infertileReq = new std::queue<Demand*>() ;
  	pregnantReq = new std::queue<Demand*>() ;
  	dairyCowReq = new std::queue<Demand*>();
  	oldCowReq = new std::queue<Demand*>();
	filters = new std::vector<TradingFilter*>();
	filters->push_back( new WellSlaughterhouseFilter());
	filters->push_back( new SameFarmFilter() );
}
Market::~Market(){
	this->s = NULL;
	this->flushQueues();
	delete calves;
  	delete heifersPreBreeding;
  	delete heifersRdyBreeding ;
  	delete infertile;
  	delete pregnant;
  	delete dairyCow;
  	delete oldCow; 
	delete calvesReq;
  	delete heifersPreBreedingReq;
  	delete heifersRdyBreedingReq;
  	delete infertileReq;
  	delete pregnantReq;
  	delete dairyCowReq;
  	delete oldCowReq;
  	for(auto filter : *filters){
	  	delete filter;
  	}
  	delete filters;
}
void Market::register_offer( Offer * offer){

	Cow::Set* cows = offer->getCows();
	std::queue<Cow*>* offerQueue = nullptr;
	std::queue<Demand*>* demandQueue = nullptr;
	
	std::queue<Cow*>* bufferQueue = new std::queue<Cow*>();

	for(auto cow : *cows){//for every cow
		//find the right queues depending on age and breeding activity

		std::pair<std::queue<Cow*>*, std::queue<Demand*>*> pair= this->getRelevantQueues(cow->getCowTradeCriteria());
		offerQueue = pair.first;
		demandQueue = pair.second;
		if(demandQueue->size()  > 0){//if there is a request for that kind of cow
			#ifdef _MARKET_DEBUG_
				std::cout << "Market: there is demand for that kind of cow" << std::endl;
			#endif
			if(offerQueue->size() == 0){//if there is no offers for that kind of cow
				//TODO: the demand does not come from the same farm (diversity in genes).
				//TODO: implement some trading range (farms will rather trade with farms next to them)	
				Demand* d = demandQueue->front();
				//TODO trade more with farms you haven't been trading with for a longer time?!
				//schedule a trade event for that particular cow
				#ifdef _MARKET_DEBUG_
					std::cout << "Market: schedule new trade" << std::endl;
				#endif
				Trade_Event *e = new Trade_Event(s->getCurrentTime()+bvd_const::standard_trade_execution_time,cow->id(),d->src);
				if(this->scheduleTrade(e) ){ 
					//std::cout << d->src->id << " " << cow->herd->farm->id << std::endl;
					
					//reduce the demand in that request 
					d->numberOfDemandedCows--;
				//delete demand if empty
					if(d->numberOfDemandedCows == 0){
						demandQueue->pop();
						delete d;
					}
				}else{
					bufferQueue->push(cow);
				}
			}else{// try to match offers and demands
				//std::cerr << "Market: This thing should probably never occur. Matching offers and demands that are already in Queue in the Market is not implemented yet." << std::endl;
				this->matchTradingPartners(offerQueue, demandQueue);
				
			}
		}else{//if there is no request for such a kind of cow, put it into the offering queue

			#ifdef _MARKET_DEBUG_
					std::cout << "Market: putting offered cow in queue with length " << offerQueue->size() << std::endl;
					std::cout << "Market: corrosponding demand queue has size " << demandQueue->size() << std::endl;
			#endif
			offerQueue->push(cow);

		}
				
		
	}
	
	#ifdef _MARKET_DEBUG_
		std::cout << "Market: handled offer with " << cows->size() << " cows" << std::endl;
	#endif
	while(bufferQueue->size() > 0){
		//this is not optimal when it comes to timing, but should work for now. TODO: when timing problems arise: solve that problem
		Cow* cow = bufferQueue->front();
		offerQueue->push(cow);
		bufferQueue->pop();
	}
	delete offer;

}
void Market::register_demand( Demand * demand){

	std::pair<std::queue<Cow*>*, std::queue<Demand*>*> pair = this->getRelevantQueues(demand->crit);	
	std::queue<Cow*>* offerQueue = pair.first;
	std::queue<Demand*>* demandQueue = pair.second;
	//this->getRelevantQueues(demand->crit, offerQueue, demandQueue);
	demandQueue->push(demand);
	if(offerQueue->size() > 0 && demandQueue->size() > 0){
		this->matchTradingPartners(offerQueue, demandQueue);
	}
	#ifdef _MARKET_DEBUG_
		std::cout << "Market: received demand with " << demand->numberOfDemandedCows << " cows" << std::endl;
	#endif
	
	

	#ifdef _MARKET_DEBUG_
		std::cout << "Market: handled demand with crit" << demand->crit << std::endl;
	#endif
}
void Market::flushQueues(){
	while(!calves->empty()){ calves->pop();}
	while(!heifersPreBreeding->empty()){ heifersPreBreeding->pop();}
	while(!heifersRdyBreeding->empty()){ heifersRdyBreeding->pop();}
	while(!infertile->empty()){ infertile->pop();}
	while(!pregnant->empty()){ pregnant->pop();}
	while(!dairyCow->empty()){ dairyCow->pop();}
	while(!oldCow->empty()){ oldCow->pop();}
	while(!calvesReq->empty()){ calvesReq->pop();}
	while(!heifersPreBreedingReq->empty()){ heifersPreBreedingReq->pop();}
	while(!heifersRdyBreedingReq->empty()){ heifersRdyBreedingReq->pop();}
	while(!infertileReq->empty()){ infertileReq->pop();}
	while(!pregnantReq->empty()){ pregnantReq->pop();}
	while(!dairyCowReq->empty()){ dairyCowReq->pop();}
	while(!oldCowReq->empty()){ oldCowReq->pop();}
	
  	
}
void Market::matchTradingPartners(std::queue<Cow*>* offerQueue, std::queue<Demand*>* demandQueue){
	//while the demandQueue and offerQueue have entries, match them.
	std::queue<Cow*>* bufferQueue = new std::queue<Cow*>();
	while(offerQueue->size() > 0 && demandQueue->size() > 0){
		Demand* d = demandQueue->front();
		this->matchDemandToOfferQueue(d, offerQueue);
		if(d->numberOfDemandedCows == 0){
			demandQueue->pop();
			//delete d;
		}
	}
	while(bufferQueue->size() > 0){
		//this is not optimal when it comes to timing, but should work for now. TODO: when timing problems arise: solve that problem
		Cow* cow = bufferQueue->front();
		offerQueue->push(cow);
		bufferQueue->pop();
	}

}
void Market::matchDemandToOfferQueue(Demand* demand, std::queue<Cow*>* offerQueue){
	std::queue<Cow*>* bufferQueue = new std::queue<Cow*>();
	while(demand->numberOfDemandedCows > 0 && offerQueue->size() > 0){

		Cow* cow = offerQueue->front();
		
		Trade_Event *e = new Trade_Event(this->s->getCurrentTime()+bvd_const::standard_trade_execution_time,cow->id(),demand->src);
		
		if(this->scheduleTrade(e)){ 
			#ifdef _MARKET_DEBUG_
				std::cout << "Market: schedule new trade" << std::endl;
			#endif

		}else{
			bufferQueue->push(cow);
		}
		offerQueue->pop();
		demand->numberOfDemandedCows--;

	}
	while(bufferQueue->size() > 0){
		//this is not optimal when it comes to timing, but should work for now. TODO: when timing problems arise: solve that problem
		Cow* cow = bufferQueue->front();
		offerQueue->push(cow);
		bufferQueue->pop();
	}
}
std::pair<std::queue<Cow*>*, std::queue<Demand*>*> Market::getRelevantQueues(Cow_Trade_Criteria crit){
	std::pair<std::queue<Cow*>*, std::queue<Demand*>*> retPair = *new std::pair<std::queue<Cow*>*, std::queue<Demand*>*>();
	switch(crit){
			case CALF:
				retPair.first = this->calves;
				retPair.second = this->calvesReq;	
				break;
			case HEIFER_PRE_BREEDING:
				retPair.first  = this->heifersPreBreeding;	
				retPair.second = this->heifersPreBreedingReq;
				break;
			case HEIFER_RDY_BREEDING:
				retPair.first  = this->heifersRdyBreeding;	
				retPair.second = this->heifersRdyBreedingReq;
				break;
			case INFERTILE:
				retPair.first  = this->infertile;	
				retPair.second = this->infertileReq;
				break;
			case PREGNANT:
				retPair.first  = this->pregnant;	
				retPair.second = this->pregnantReq;
				break;
			case DAIRY_COW:
				retPair.first  = this->dairyCow;	
				retPair.second = this->dairyCowReq;
				break;
			case OLD_COW:
				retPair.first  = this->oldCow;		
				retPair.second = this->oldCowReq;
				break; 
		}
		
		return retPair;
		
}
bool Market::scheduleTrade(Trade_Event* event){
	for(TradingFilter* filter: *this->filters){
		if(!(*filter)(event))
			return false;
	}
	s->schedule_event( event );
	return true;
}
void Market::schedule_trades(){}