#!/usr/bin/env python
import matplotlib.pyplot as plt
import numpy as np
import csv
import os
import sys
from math import log
def getColumn(filename, column):
    results = csv.reader(open(filename), delimiter=";")
    return [result[column] for result in results]

plt.figure(1)
if len(sys.argv) > 2:
    csvFileName = sys.argv[2]
    x = getColumn(csvFileName, 0)
    yr = getColumn(csvFileName, 1)
    y = [float(i) for i in yr[1:]]
    maxy = max(y)
    normalized = [i/maxy for i in y ]
    
    plt.plot(x[1:],normalized, "csv normalized")

abs_script_dir = os.path.dirname(os.path.abspath(__file__))

filenames = []
path = ""
if sys.argv[1].lower().endswith('.txt'):
    path = os.path.dirname(os.path.abspath(sys.argv[1]))
    with open(sys.argv[1]) as f:
        filenames = f.readlines()
elif sys.argv[1].lower().endswith('.h5'):
    filenames.append(sys.argv[1])
else:
    print("no valid file given")
    sys.exit(1)
for file in filenames:
    if not path == "":
        sys.argv[1] = (path+"/"+file)
    else:
        sys.argv[1] = file
    execfile(os.path.join(abs_script_dir, "retrieveBreedingDynamics.py"))

plt.plot(femaleAgeHistX[0:printTillAge-1],femaleAgeNormal, label="female simulation")

plt.title('normalized age distribution of dead female cows in the simulation')
plt.xlabel('time in days')
plt.ylabel('number of cows')
plt.figure(2)
plt.title('age distribution of dead female cows in the simulation')
plt.xlabel('time in days')
plt.ylabel('number of cows')
if len(sys.argv) > 2:
    plt.plot(x[1:],yr[1:], "csv")


plt.plot(femaleAgeHistX[0:printTillAge-1], np.log10(femaleAgeHistY), label="female simulation")
plt.figure(3)
plt.title('intermediate calving time')
plt.xlabel('time in days')
plt.ylabel('number of cows')
plt.plot(intermediateCalvingTimesX[0:plotMeanCalvingTimeTillAge-1], intermediateCalvingTimesY, label="intermediate calving time simulation")
plt.figure(4)
plt.title('age of male cows at point of death')
plt.plot(maleAgeHistX[0:printTillAge-1], maleAgeHistY, label="male")

plt.figure(5)
plt.title('first calving time')
plt.xlabel('time in days')
plt.ylabel('number of cows')

plt.plot(firstCalvingTimeX[0:plotFirstCalvingTimeTillAge-plotFirstCalvingTimeStartingAtAge-1], firstCalvingTimeY, label="first calving time simulation")
plt.show()