#include "HDF5Handler.h"
#include "System.h"
#include "Utilities.h"
#include "Cow.h"
#include "Farm.h"
#include "Herd.h"





#pragma mark -
#pragma mark Logging functions


void HDF5FileHandler::logBirth(const Cow *c){}

void HDF5FileHandler::logResultingEventOfInfection(const Event* e){
	Cow *c = Cow::get_address(e->id);
	InfectionResultDataPoint p = {c->id(), (int) e->type , (int) c->calf_status};
	this->infectionResultSave->push_back(p);
	
}

void HDF5FileHandler::logTrade(const Trade_Event* event){
//	std::cout << " amoll" << std::endl;
	Cow* c = Cow::get_address( event->id );
//	std::cout << " amoll" << std::endl;
	double destFarmID = (double) event->farm->id;
	double srcFarmID;
//	std::cout << " g" << std::endl;
	if(c->herd != NULL && c->herd->farm != NULL)
		srcFarmID = (double) c->herd->farm->id;
	else
		srcFarmID = -1.0;
//	std::cout << " g" << std::endl;
	double cowID =  (double) c->id();
	double CowSex = (double) c->female;
//	std::cout << " f" << std::endl;
	TradeDataPoint point = {event->execution_time, srcFarmID, destFarmID, cowID, event->execution_time - c->birth_time, CowSex};
//	std::cout << " f" << std::endl;
	this->trades->push_back(point);
//	std::cout << " amoll amoll c c g" << std::endl;
}




void HDF5FileHandler::logDyingCow(const Event* event,const Cow* cow){
	this->writeCowToSave(event,cow, this->CowData);
	if(cow->infection_status == Infection_Status::PERSISTENTLY_INFECTED)
		this->writeCowToSave(event,cow, this->PIDeathSave);
}
void HDF5FileHandler::logInfection(const Event* event,const Cow* cow, const bool didLooseCalf){
	this->writeCowToSave(event,cow, this->InfectionData);
}




void HDF5FileHandler::logEvent(const Event *e){
	Cow* c = Cow::get_address( e->id );
	
		if(c != NULL){
			switch(e->type){
				case Event_Type::TRADE:
					this->logTrade((Trade_Event*) e);
				break;
				case Event_Type::DEATH:
				case Event_Type::SLAUGHTER:
				case Event_Type::CULLING:

					this->logDyingCow(e, c);
				break;
				case Event_Type::ANTIBODYTEST:
				case Event_Type::VIRUSTEST:
				case Event_Type::TEST:
					this->logTest(e, c);
				break;
				case Event_Type::ABORTION:
					
				break;
				case Event_Type::INFECTION:
					this->logInfection(e, c);
				break;
				default: break;
				
			}
		}
}
inline void HDF5FileHandler::logTest(const Event *e, const Cow* c){

	TestDataPoint p = this->testEventToDataPoint(e, c);
	this->testStorage->push_back(p);
}
void HDF5FileHandler::logFarms(const double time,const std::vector< Farm* >*farms){

	this->farmDataTimes->push_back(time);
	FarmDataSave * data = new FarmDataSave();
	CowDataSave *piData = new CowDataSave();
	std::vector<Cow*>* pisOfFarm;
	for(auto farm : *farms){
		if(farm->getType() != SLAUGHTERHOUSE && farm->getType() != WELL){
			pisOfFarm = farm->getPIs();
			
			for(auto pi: *pisOfFarm){
				if(pi != NULL && pi->id() > 0 ){

					piData->push_back(createCowDataPointForCow(NULL,pi));
				}
			}
			
			delete pisOfFarm;
			int numS = farm->number_of_S();
			int numPI = farm->number_of_PI();
			int numTI = farm->number_of_TI();
			int numR = farm->number_of_R();
			
			FarmDataPoint p = {farm->id, numS, numTI, numPI, numR};
			data->push_back(p);
			
		}
	} 
	
	if(piData->size() > 0){
		this->piStorage->push_back(piData);
	}else{
		delete piData;
	}
	this->farmNum = this->farmNum > farms->size() ? farmNum : farms->size();
	this->farmData->push_back(data);
	
}
#pragma mark - 
#pragma mark Creating Data Points

inline TestDataPoint HDF5FileHandler::testEventToDataPoint(const Event*e, const Cow* c){
	TestDataPoint point = {(double) c->id(),e->execution_time,c->age(),(double) e->type,(double) c->female,(double) c->knownStatus, (double) c->infection_status, (double) c->knownStatus};
	
	return point;
}
CowDataPoint HDF5FileHandler::createCowDataPointForCow(const Event* event,const Cow* cow){
	CowDataPoint point;
	
	double age ;
	if(event == NULL){

		age = cow->age();//System::getInstance(NULL)->getCurrentTime() - cow->birth_time;
		}
	else{
		age = event->execution_time - cow->birth_time;
		
	}	
	int female = (int) cow->female;
	double lastCalvingTime = 0.0;


		int j = 0;
		double state;
		while(cow->birthTimesOfCalves != NULL && cow->birthTimesOfCalves[j] != -1.0){
			if(event != NULL && (event->type == Event_Type::CULLING || event->type == Event_Type::SLAUGHTER || event->type == Event_Type::DEATH )){ 

				state = 0.0;
				if(lastCalvingTime > 0.0 ){	
					double intermediateCalvingTime = cow->birthTimesOfCalves[j] - lastCalvingTime;	
					if(std::abs(intermediateCalvingTime) > 1e-1){
						if(cow->timeOfInfection > lastCalvingTime && cow->timeOfInfection < cow->birthTimesOfCalves[j])
							state = 1.0;
						else if(cow->infection_status == Infection_Status::PERSISTENTLY_INFECTED)
							state = 2.0;
						intermediateCalvingTimePoint p = {(double) cow->id(),intermediateCalvingTime,state};
						this->intermediateCalvingTimes->push_back(	p );
					}else{
		//				std::cout << lastCalvingTime << " " << cow->birthTimesOfCalves[j] << std::endl;
		//				std::cout << intermediateCalvingTime << std::endl;
					}
				}
					
				lastCalvingTime = cow->birthTimesOfCalves[j];
			}
			j++;
			
		}
	
	double firstCalvingTime = -1.0;
	double eventType = -1.0;
	if(event != NULL)
		eventType = (double) event->type;
	
	if(cow->birthTimesOfCalves != NULL && cow->birthTimesOfCalves[0] != -1.0)
		firstCalvingTime = cow->birthTimesOfCalves[0] - cow->birth_time;
	
	point = {(double) (cow->id()),cow->last_conception_time,(double) female,age, (double) (j-1),  eventType, firstCalvingTime, cow->birth_time, (double) cow->knownStatus, cow->firstTestTime, cow->lastTestTime};
	
	return point;
}


#pragma mark -
#pragma mark Writing the file

void HDF5FileHandler::writeLivingPIsToFile(const hid_t& file){
	

	
    const std::string tablePrefix = "PIs_LIVING_t";
	for(int i=0; i < piStorage->size(); i++){
		CowDataSave * currentSave = (*piStorage)[i];
		
		double time = (*farmDataTimes)[i];
		std::string tableName = tablePrefix + std::to_string((int)(time));

		this->writeSaveToFile(file, currentSave,tableName);
			
	}
}
void HDF5FileHandler::writeFarmData(const hid_t& file){
	
	if(this->farmData->size() <= 0 || this->farmDataTimes->size() <= 0){
		return;
	}
	hsize_t t_dims[1] = {this->farmDataTimes->size()};
	double *timeData = &((*this->farmDataTimes)[0]);
	int success = H5LTmake_dataset_double( file ,
				     "/BVD_Farm_Times",
				     1,
				     t_dims,
				      timeData);
	if(success < 0){
			std::cerr << "Failed to create farm time dataset" << std::endl;
			Utilities::printStackTrace(15);
			exit(14);
	}
	
	
	
	const int rank = 2;//FarmDataPoint::size;

    const std::string tablePrefix = "Farms_t";
	
	int * data ;
	for(int i=0; i < farmData->size(); i++){
		FarmDataSave * currentSave = (*farmData)[i];
		static hsize_t dims[rank] = {currentSave->size(), (hsize_t) FarmDataPoint::size};
		double time = (*farmDataTimes)[i];

		 
		std::string tableName = tablePrefix + std::to_string((int)(time));
		data = nullptr;
		this->createWritableData(currentSave, &data);
		

		int success = H5LTmake_dataset_int( file ,
						  tableName.c_str(),
						  rank,
						  dims,
						  data);
		if(success < 0){
			std::cerr << "Failed to create farm dataset for time " << time << std::endl;

			exit(13);
		}	
		delete[] data;
		data = nullptr;
			
	}

		

	
}

void HDF5FileHandler::writeCowData(const hid_t& file_id){

	if( this->intermediateCalvingTimes->size() > 0){
		double *calvingTimeData;// = &((*this->intermediateCalvingTimes)[0]);
		this->createWritableData(this->intermediateCalvingTimes, &calvingTimeData);
		const int rank = 2;
		hsize_t calvingTime_dims[rank] = {(hsize_t) this->intermediateCalvingTimes->size(), (hsize_t)intermediateCalvingTimePoint::size};
		int success = H5LTmake_dataset_double( file_id ,
						 HDF5FileHandler::intermediateCalvingTimeTableName.c_str(),
						 rank,
						 calvingTime_dims,
						  calvingTimeData);
		if(success < 0){
				std::cerr << "Failed to create intermediate calving times dataset" << std::endl;
				Utilities::printStackTrace(15);
				exit(14);
		}
		delete[] calvingTimeData;
	}
	this->writeSaveToFile(file_id,this->CowData, "BVD_Dead_Cows");
	this->writeSaveToFile(file_id,this->InfectionData, "BVD_Cows_Infections");
	this->writeSaveToFile(file_id,this->PIDeathSave, "BVD_Dead_PIs");
	this->writeLivingPIsToFile(file_id);
}




void HDF5FileHandler::writeTestData(const hid_t& file_id){
	
	
	if(this->testStorage->size() > 0){
		std::cout << "trying to write test data" << std::endl;
		const int rank = 2;
		hsize_t dims[rank] = { static_cast<hsize_t>(this->testStorage->size()), static_cast<hsize_t>(TestDataPoint::size) }; 
		

		double * data = nullptr;
		this->createWritableData(this->testStorage, &data);
		int success = H5LTmake_dataset_double( file_id ,
						  HDF5FileHandler::testsTableName.c_str(),
						  rank,
						  dims,
						  data);
		if(success < 0){
			std::cerr << "Failed to create test dataset" << std::endl;
			exit(12);
		}
		delete[] data;
	}
				
}

void HDF5FileHandler::writeInfectionResultData(const hid_t& file){
	if(this->infectionResultSave->size() <= 0) return;
	const int rank = 2;
	hsize_t dims[rank] = { static_cast<hsize_t>(this->infectionResultSave->size()), static_cast<hsize_t>(InfectionResultDataPoint::size) }; 
	

	int * data = NULL;
	this->createWritableData(this->infectionResultSave, &data);
	int success = H5LTmake_dataset_int( file ,
					  HDF5FileHandler::infectionResultTabelName.c_str(),
					  rank,
					  dims,
					  data);
	if(success < 0){
		std::cerr << "Failed to create infection result dataset" << std::endl;
		exit(12);
	}
	delete[] data;
}

void HDF5FileHandler::writeTradeData(const hid_t& file_id){
	const int rank = 2;
	hsize_t dims[rank] = { this->trades->size(), (hsize_t) TradeDataPoint::size};
	
	
	if(trades->size() > 0){

		double * data = new double[this->trades->size()*TradeDataPoint::size];
		int *tradeMatrix;
		std::vector<int*> *tradeMatrices = new std::vector<int*>();
		std::vector<double> *tradingTimes = new std::vector<double>();
		


		double tTemp = -1.0;

		for(auto it = this->trades->begin(); it != this->trades->end(); it++){
			double tRead = (*it).date;
				if((*it).srcFarmID == -1) continue;
				
				if((int) tRead != (int) tTemp ){//if there is a new timestep
					
					tTemp = tRead;
					tradingTimes->push_back(tRead);
					tradeMatrix = new int[this->farmNum * this->farmNum];
					std::fill_n(tradeMatrix, this->farmNum*this->farmNum, 0); 
					tradeMatrices->push_back(tradeMatrix);
				}
			double* tradeDP = ((double *) (*it));
//			std::cout << "aha " << std::endl;
			
			int tradeIndex = (int) ((*it).srcFarmID * this->farmNum + (*it).destFarmID);
			tradeMatrix[tradeIndex]++;
			for(int i=0; i < TradeDataPoint::size; i++){
				
				int index = (int) (it - this->trades->begin()) * TradeDataPoint::size + i;
				
				data[index] = tradeDP[i];
			}
			delete[] tradeDP;
			 
			//std::cout << std::endl;
		}
		int success = H5LTmake_dataset_double( file_id ,
						  "/BVD_Trades",
						  rank,
						  dims,
						  data);
		if(success < 0){
			std::cerr << "Failed to create trade dataset" << std::endl;
			exit(12);
		}
		
		const int tradeMatRank = 2;
		const std::string tablePrefix = "Trades_t";
               
		for(int i = 0; i < tradeMatrices->size();i++){
			const int * mat = (*tradeMatrices)[i];
			hsize_t num =  static_cast<hsize_t>(this->farmNum );
			
		
			hsize_t tradeDims[rank] = {num, num};
			
			double time = (*tradingTimes)[i];
			std::string tableName = tablePrefix + std::to_string((int)(time));
			//std::cout << i << " " <<   tableName << " " << time << std::endl; 
			int tradeSuccess = H5LTmake_dataset_int( file_id ,
						  tableName.c_str(),
						  tradeMatRank,
						  tradeDims,
						  mat);
			if(tradeSuccess < 0){
				std::cout << "failed to create trade matrices table with table name " << tableName << std::endl;
				exit(16);
			}
		}
		//std::cout << "wrote all trade matrices" << std::endl;
		hsize_t tradeTimeDim[1] = {tradingTimes->size()};
		const double* tradeTimeData = &((*tradingTimes)[0]);
		int tradeTimeSuccess = H5LTmake_dataset_double( file_id ,
						  "/BVD_Trade_Times",
						  1,
						  tradeTimeDim,
						  tradeTimeData);
		if(tradeTimeSuccess < 0){
			std::cerr << "Failed to create trade time dataset" << std::endl;
			exit(12);
		}
 
		for(auto mat : *tradeMatrices){delete[] mat;}
		delete tradeMatrices;
		delete tradingTimes;
		delete[] data;	
	
 
	}
				
}

template<typename T> 
void HDF5FileHandler::writeTemplateSaveToFile(const hid_t& file, std::vector<T>* save,const std::string tableName){}

#pragma mark -
#pragma mark - Basic File Management
hid_t HDF5FileHandler::open_file( std::string filename , bool overwrite){
	
  hid_t file_id = H5Fcreate( filename.c_str() ,
					  overwrite ? H5F_ACC_TRUNC : H5F_ACC_EXCL ,
					  H5P_DEFAULT,
					  H5P_DEFAULT);
  if (file_id < 0 )
    {
      std::cerr << "Error while setting up output file with name " << filename << " . . Possible reason: File already exists." << std::endl;
      exit(1);
    }
  return file_id;
}
void HDF5FileHandler::write_to_file(const double time){
	
//typedef std::vector<TradeDataPoint*> TradeDataSave;
		
		
	if(this->intermediateCalvingTimes->size() == 0 && this->farmDataTimes->size() == 0 && this->CowData->size() == 0 && this->trades->size() == 0) return;

	std::string filename, listfilename;
	hid_t file;
	bool flush = false;
	std::ofstream outfile;
	switch(this->mode){
		case single_file:
		
			filename = this->fullFilePath;

			this->overwrite = true; //after writing for the first time, we will always be writing to the same file
			break;
		case multi_file:
			flush = true;
			filename = this->path + this->fileprefix + "_time_" + std::to_string((int) time) + this->fileExtension;
			listfilename = this->path + this->fileprefix + "_list.txt";
			if(this->deleteList){
				std::remove(listfilename.c_str());
				this->deleteList = false;
			}

  			outfile.open(listfilename.c_str(), std::ios_base::app);
 			outfile << this->fileprefix + "_time_" + std::to_string((int) time) + this->fileExtension << std::endl;
 			outfile.close();
//			std::cerr << "Multifile output is not yet supported. Exiting" << std::endl;
//			exit(5);
			break;
		
	}
	file = this->open_file(filename, this->overwrite);
//		Utilities::printStackTrace(15);
	this->writeTradeData(file);
	this->writeFarmData(file);
	this->writeCowData(file);
	this->writeTestData(file);
	this->writeInfectionResultData(file);
	H5Fclose( file );
	if(flush)
		this->flushStorages();
}

void HDF5FileHandler::writeSaveToFile(const hid_t& file, CowDataSave* save, const std::string tableName){
	
	if(save->size() <= 0 ) return;
	
	const int rank = 2;//CowDataPoint::size;

	hsize_t dims[rank] = { save->size(), (hsize_t) CowDataPoint::size };
	
	double * data = nullptr;// = new double[save->size()*CowDataPoint::size];
	this->createWritableData(save, &data);

	int success = H5LTmake_dataset_double( file,
					  tableName.c_str(),
					  rank,
					  dims,
					  data);
	if(success < 0){
		std::cerr << "Failed to create trade dataset" << std::endl;
		exit(12);
	}
	
	if(data != NULL)
		delete[] data;
	else
		std::cout << "data should not be NULL, it has a size of " << save->size() << std::endl;
}
template<typename T, typename returnType>
void HDF5FileHandler::createWritableData(std::vector<T>* save, returnType** data){
	*data = new returnType[save->size()*T::size];
	for(auto it = save->begin(); it != save->end(); it++){
	
		returnType* cowDP = ((returnType *) (*it));
	
		for(int i=0; i < T::size; i++){
		
			int index = (int) (it - save->begin()) * T::size + i;
			
			(*data)[index] = cowDP[i];
		}
		delete[] cowDP;
	//std::cout << std::endl;
	}
}

#pragma mark -
#pragma mark Storage Management
inline void HDF5FileHandler::writeCowToSave(const Event* event,const Cow* cow,CowDataSave* save){
	
	save->push_back(createCowDataPointForCow(event,cow));
}

void HDF5FileHandler::flushStorages(){
	this->clearMyStorage(this->farmData);
	//this->farmData->clear();
	this->farmDataTimes->clear();
	this->intermediateCalvingTimes->clear();
	this->clearMySave(this->trades);
	this->clearMySave(this->CowData);
	this->clearMySave(this->InfectionData);
	this->clearMySave(this->PIDeathSave);
	this->clearMySave(this->testStorage);
	this->clearMySave(this->infectionResultSave);
	this->clearMyStorage(this->piStorage);	
}

template<typename T>
void HDF5FileHandler::clearMySave(std::vector<T>* save, bool clearThis){
	if(clearThis)
		save->clear();
}

template<typename T>
void HDF5FileHandler::clearMyStorage(std::vector<T>* storage){
	for (auto save: *storage){
		if(save->size() > 0){
			this->clearMySave(save,false);
			}
		delete save;
	}
	storage->clear();
}

#pragma mark - 
#pragma mark Definitions

double CowDataPoint::operator[] (int i){
	int retVal = -1;
	switch(i){
		case 0:
			retVal = this->id;
			break;
		case 1:
			retVal = this->lastConceptionTime;
			break;
		case 2: 
			retVal = this->female;
			break;
		case 3: 
			retVal = this->age;
			break;
		case 4:
			retVal = this->numberOfCalves;
			break;
			
		case 5:
			retVal = this->causeOfDeath;
			break;
		case 6:
			retVal = this->firstCalvingTime;
			break;
		case 7:
			retVal = this->birthTime;
			break;	
		case 8:
			retVal = this->knownState;
			break;	
		case 9:
			retVal = this->numberOfVaccinations;
			break;
		case 10:
			retVal = this->firstTestTime;
			break;
		case 11:
			retVal = this->lastTestTime;
			break;
		default:
			std::cerr << "Error: Asked CowDataPoint for index " << i << std::endl;
			break;
		
	}
	return retVal;
}
const int CowDataPoint::size = 10;
CowDataPoint::operator double*(){

	double *dat = new double[CowDataPoint::size];
	for(int i=0; i< CowDataPoint::size; i++){
		dat[i] = (*this)[i];
		
	}
	return dat;
}
int FarmDataPoint::operator[] (int i){
	int retVal = -1;
	switch(i){
		case 0:
			retVal = this->id;
			break;
		case 1:
			retVal = this->numberS;
			break;
		case 2: 
			retVal = this->numberTI;
			break;
		case 3: 
			retVal = this->numberPI;
			break;
		case 4:
			retVal = this->numberR;
			break;
		default:
			std::cerr << "Error: Asked FarmDataPoint for index " << i << std::endl;
			break;
		
	}
	return retVal;
}
const int FarmDataPoint::size = 5;
FarmDataPoint::operator int*(){

	int *dat = new int[FarmDataPoint::size];
	for(int i=0; i< FarmDataPoint::size; i++){
		dat[i] = (*this)[i];
		
	}
	
	return dat;
}

int InfectionResultDataPoint::operator[] (int i){
	int retVal = -1;
	switch(i){
		case 0:
			retVal = this->id;
			break;
		case 1:
			retVal = this->resultType;
			break;
		case 2: 
			retVal = this->calfStatus;
			break;
		
		default:
			std::cerr << "Error: Asked infection result data point for index " << i << std::endl;
			break;
		
	}
	return retVal;
}
const int InfectionResultDataPoint::size = 3;
InfectionResultDataPoint::operator int*(){

	int *dat = new int[InfectionResultDataPoint::size];
	for(int i=0; i< InfectionResultDataPoint::size; i++){
		dat[i] = (*this)[i];
		
	}
	
	return dat;
}

double TradeDataPoint::operator[] (int i){
	double retVal = -1.0;
	switch(i){
		case 0:
			retVal = this->date;
			break;
		case 1:
			retVal = this->srcFarmID;
			break;
		case 2:
			retVal = this->destFarmID;
			break;
		case 3:
			retVal = this->cowID;
			break;
		case 4:
			retVal = this->cowAge;
			break;
		case 5:
			retVal = this->cowSex;
			break;
		default:
			std::cerr << "Error: Asked TradeDataPoint for index " << i << std::endl;
			break;
	}
	return retVal;
}

const int TradeDataPoint::size = 6; //number of data points given in a tradeDataPoint
TradeDataPoint::operator const double*(){

	double *dat = new double[TradeDataPoint::size];
	for(int i=0; i< TradeDataPoint::size; i++){
		dat[i] = (*this)[i];
		
	}
	
	return dat;
}
TradeDataPoint::operator double*(){

	double *dat = new double[TradeDataPoint::size];
	for(int i=0; i< TradeDataPoint::size; i++){
		dat[i] = (*this)[i];
		
	}
	
	return dat;
}
double TestDataPoint::operator[] (int i){
	double retVal = -1.0;
	switch(i){
		case 0:
			retVal = this->id;
			break;
		case 1:
			retVal = this->date;
			break;
		case 2:
			retVal = this->age;
			break;
		case 3:
			retVal = this->testType;
			break;
		case 4:
			retVal = this->sex;
			break;
		case 5:
			retVal = this->result;
			break;
		case 6:
			retVal = this->infectiousState;
			break;
		case 7:
			retVal = this->knownState;
			break;
		default:
			std::cerr << "Error: Asked TradeDataPoint for index " << i << std::endl;
			break;
	}
	return retVal;
}

const int TestDataPoint::size = 8; //number of data points given in a tradeDataPoint
TestDataPoint::operator const double*(){
	double *dat = new double[TestDataPoint::size];
	for(int i=0; i< TestDataPoint::size; i++){
		dat[i] = (*this)[i];	
	}
	return dat;
}
TestDataPoint::operator double*(){
	double *dat = new double[TestDataPoint::size];
	for(int i=0; i< TestDataPoint::size; i++){
		dat[i] = (*this)[i];
	}
	return dat;
}
double intermediateCalvingTimePoint::operator[] (int i){
	int retVal = -1;
	switch(i){
		case 0:
			retVal = this->id;
			break;
		case 1:
			retVal = this->intermediateCalvingTime;
			break;
		case 2: 
			retVal = this->healthState;
			break;
		
		default:
			std::cerr << "Error: Asked intermediate calving time data point for index " << i << std::endl;
			break;
		
	}
	return retVal;
}
const int intermediateCalvingTimePoint::size = 3;
intermediateCalvingTimePoint::operator double*(){

	double *dat = new double[intermediateCalvingTimePoint::size];
	for(int i=0; i< intermediateCalvingTimePoint::size; i++){
		dat[i] = (*this)[i];
		
	}
	
	return dat;
}

const std::string HDF5FileHandler::intermediateCalvingTimeTableName = "BVD_intermediate_calving_times";
const std::string HDF5FileHandler::infectionResultTabelName = "BVD_INFECTION_RESULTS";
const std::string HDF5FileHandler::testsTableName = "BVD_Tests";

HDF5FileHandler::HDF5FileHandler(INIReader& reader):FileHandler(reader){
	this->fileExtension = ".h5";
	std::string fileMode = reader.Get("output", "mode", "single_file");	
	this->mode = HDF5FileHandler::iniInputToFileMode(fileMode);
	
	this->trades = new TradeDataSave();
	this->farmData = new FarmData();
	this->farmDataTimes = new std::vector<double>();
	this->intermediateCalvingTimes = new intermediateCalvingTimeSave();
	this->CowData = new CowDataSave();
	this->InfectionData = new CowDataSave();
	this->PIDeathSave = new CowDataSave();
	this->piStorage = new CowDataSaveStorage();
	this->farmNum = 0;
	this->deleteList = this->overwrite;
	this->setPath();
	this->testStorage = new TestDataSave();
	this->infectionResultSave = new infectionResultDataSave();
}

HDF5FileHandler::~HDF5FileHandler(){
	this->flushStorages();
	delete this->farmData;
  	delete this->intermediateCalvingTimes;
	delete this->trades;
  	delete this->farmDataTimes;
	delete this->CowData;
	delete this->InfectionData;
	delete this->PIDeathSave;
	delete this->piStorage;
	delete this->testStorage;
	delete this->infectionResultSave;
}


fileMode HDF5FileHandler::iniInputToFileMode(std::string& fileMode,bool shallExit){
	if(fileMode.compare("single_file") == 0){
		return single_file;
	}else if(fileMode.compare("multi_file") == 0 || fileMode.compare("split_file") == 0){
		return multi_file;
	}else{
		std::cout << "The specified output mode \"" << fileMode <<"\" does not exist" <<std::endl;
		if(shallExit)
			exit(4);
	}
}