#include "SQLiteHandler.h"
#include "Cow.h"
#include "Farm.h"
#include "Events.h"
#include "Herd.h"
const std::string SQLiteHandler::eventTableName = "Event";
const std::string SQLiteHandler::cowTableName = "Cow";

SQLiteHandler::SQLiteHandler(INIReader& reader):FileHandler(reader){
	this->fileExtension = ".sqlite";
	this->setPath();
	struct stat buffer;   
	  	bool exists = (stat (fullFilePath.c_str(), &buffer) == 0); 
	  	if(!exists || this->overwrite){
		  	std::ifstream  src("templates/databaseTemplate.sqlite", std::ios::binary);
    		std::ofstream  dst(fullFilePath.c_str(),   std::ios::binary);

    		dst << src.rdbuf();
	  	}
	
}

SQLiteHandler::~SQLiteHandler(){}

void SQLiteHandler::logFarms(const double time,const std::vector< Farm* >*farms){}
void SQLiteHandler::write_to_file(const double time){}

inline void SQLiteHandler::runSQLQuery(const std::ostringstream& sqlstream){
	
	sqlite3 *db;
   	char *zErrMsg = 0;
   	int rc;
   	const std::string sqlStr = sqlstream.str();
	char* sql =(char*) sqlStr.c_str();
   	rc = sqlite3_open(this->fullFilePath.c_str(), &db);
	if( rc ){
		fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
		exit(-5000);
	}
   
	rc = sqlite3_exec(db, sql, NULL/*callback*/, 0, &zErrMsg);
   	if( rc != SQLITE_OK ){
    	fprintf(stderr, "SQL error: %s\n", zErrMsg);
    	sqlite3_free(zErrMsg);
   	}
   	sqlite3_close(db);

}

void SQLiteHandler::logEvent(const Event* e){
	std::ostringstream sql;	

   /* Create SQL statement */
   	
	   sql << "INSERT INTO '";
	   sql << eventTableName;
	   sql << "' (type_id,exec_time,farm_id) ";
	   sql << "VALUES (";
	   sql << (int) e->type;
	   sql << ",";
	   sql << e->execution_time; 
	   sql << " , ";
	   sql << (e->farm != NULL ? e->farm->id : -1);
	   sql << ");";
	   
		this->runSQLQuery(sql);
}

void SQLiteHandler::logBirth(const Cow *c){
	if(c == NULL) return;
	
		std::ostringstream sql;	

   /* Create SQL statement */

	   sql << "INSERT INTO '";
	   sql << cowTableName;
	   sql << "' (id,time_of_birth,mother_id,birth_farm_id, birth_health_status_id, sex) ";
	   sql << "VALUES (";
	   sql << (int) c->id() << ",";
	   sql << c->birth_time << ",";
	   sql << (c->mother != NULL ? c->mother->id() : -1) << ",";
	  	sql << ((c->herd != NULL && c->herd->farm != NULL) ? c->herd->farm->id : -1) << ",";
	   sql << (int) c->infection_status; 
	   sql << " , ";
	   sql << (int) c->female ;
	   sql << ");";
	   
		this->runSQLQuery(sql);
	

}