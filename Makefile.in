OS := $(shell uname -s)
CFLAGS = -Wall -g -pedantic #-fopenmp #-D_DEBUG_ # -D _OUTPUT_DEBUG_ #-D_FARM_MANAGER_DEBUG_ -D_INITIALIZER_DEBUG_ -D_HERD_DEBUG_   -D_MARKET_DEBUG_
CCFLAGS = -std=c++11 $(CFLAGS)
LFLAGS = -lgsl -lgslcblas -lm -lsqlite3

# new
CUSTOMLIBSPATH := lib
#

LD_INCLUDE=  -L $(CUSTOMLIBSPATH)

INC = -I/usr/include -I/usr/include/hdf5/serial -I/usr/local/include -I. -I./projectImports/inih/ -I include
ifeq ($(OS),Darwin)#MacOS
CC = clang++
CCC = clang
LFLAGS := $(LFLAGS) -lhdf5 -lhdf5_hl

#check for macports
PORTSEXIST := $(shell ports -v dot 2> /dev/null)

#new
ifdef PORTSEXIST
INC := $(INC) -I /opt/local/include/
LD_INCLUDE := $(LD_INCLUDE) -L /opt/local/lib/
endif
#
else
CC = g++
CCC = g++
#mod
LD_INCLUDE := $(LD_INCLUDE) -L/usr/lib/x86_64-linux-gnu/serial -L/usr/lib -L/usr/lib/x86_64-linux-gnu/
#
LFLAGS := $(LFLAGS) -lhdf5_serial -lhdf5_serial_hl # for some reason or Linux systems required these library names in order to work as expected
endif
SRCDIR := src
TESTDIR := tests
BUILDDIR := build
TARGET := build/bvd_agent_simulation
TESTTARGET := build/test_executable

SRCEXT := cpp
SOURCES := $(shell find $(SRCDIR) -type f -name *.$(SRCEXT))
TESTSSRC := $(shell find $(TESTDIR) -type f -name *.$(SRCEXT))
CLEANSRC := $(SOURCES:src/programm.cpp=) #$(patsubst src/programm.cpp,'',$(SOURCES:.$(SRCEXT)=.o))
CLEANOBJS := $(CLEANSRC:.$(SRCEXT)=.o)
OBJECTS := $(patsubst $(SRCDIR)/%,$(BUILDDIR)/%,$(CLEANOBJS))
TESTOBJECTS := $(patsubst $(TESTDIR)/%,$(BUILDDIR)/%,$(TESTSSRC:.$(SRCEXT)=.o))
#INC = some paths...

#CUSTOMLIBSPATH := lib

INIOBJECTS := $(CUSTOMLIBSPATH)/ini.o $(CUSTOMLIBSPATH)/INIReader.o

CUSTOMLIBS := $(INIOBJECTS)

$(TARGET): $(OBJECTS) $(CUSTOMLIBS) $(BUILDDIR)/programm.o
	@echo " Linking..."
	@echo " $(CC) $^ -o $(TARGET) $(LFLAGS) $(LD_INCLUDE)"; $(CC) $^ -o $(TARGET) $(LFLAGS) $(LD_INCLUDE)

$(BUILDDIR)/%.o: $(SRCDIR)/%.$(SRCEXT)
	@mkdir -p $(BUILDDIR)
	@mkdir -p $(CUSTOMLIBSPATH)
	@echo " $(CC) $(CCFLAGS) $(INC) -c -o $@ $<"; $(CC) $(CCFLAGS) $(INC) -c -o $@ $<

$(BUILDDIR)/%.o: $(TESTDIR)/%.$(SRCEXT)
	@echo " $(CC) $(CCFLAGS) $(INC) -c -o $@ $<"; $(CC) $(CCFLAGS) $(INC) -c -o $@ $<

tests: $(OBJECTS) $(CUSTOMLIBS) $(TESTOBJECTS)
	$(RM) $(BUILDDIR)/programm.o; #dirty hack
	@echo "$(CLEANOBJS)";
	@echo " $(CC) $^ -o $(TESTTARGET) $(LFLAGS) $(LD_INCLUDE)"; $(CC) $^ -o $(TESTTARGET) $(LFLAGS) $(LD_INCLUDE)
	./build/test_executable

clean:
	@echo " Cleaning...";
	@echo " $(RM) -r $(BUILDDIR) $(TARGET)"; $(RM) -r $(BUILDDIR) $(TARGET) $(CUSTOMLIBSPATH)

.PHONY: clean

$(CUSTOMLIBSPATH)/INIReader.o:
	$(CC) $(CCFLAGS) -c projectImports/inih/cpp/INIReader.cpp -o $(CUSTOMLIBSPATH)/INIReader.o
$(CUSTOMLIBSPATH)/ini.o:
	$(CCC) $(CFLAGS) -c projectImports/inih/ini.c -o $(CUSTOMLIBSPATH)/ini.o
